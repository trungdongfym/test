{
  "stats": {
    "suites": 11,
    "tests": 113,
    "passes": 92,
    "pending": 0,
    "failures": 21,
    "start": "2023-10-05T01:43:00.818Z",
    "end": "2023-10-05T01:44:24.666Z",
    "duration": 83848,
    "testsRegistered": 113,
    "passPercent": 81.41592920353983,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5b0cea07-0a29-4b4b-bc21-d3bd19671a1c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "291aab51-21a8-4352-bb16-a8d44b1869c1",
          "title": "TEST cpPublicApi: Custom Pricing",
          "fullFile": "/home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js",
          "file": "/tests/publicApiCP/testCPPublicApi.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"TEST cpPublicApi: Custom Pricing\"",
              "fullTitle": "TEST cpPublicApi: Custom Pricing \"before all\" hook in \"TEST cpPublicApi: Custom Pricing\"",
              "timedOut": false,
              "duration": 1219,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let payload = enableModule;\nawait fetch(`${moduleAPIURL}/module?domain=${domain}`, {\n    method: 'PUT',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload),\n})\nawait fetch(`https://b2b-solution-api.bsscommerce.com/upload/update-config?domain=${domain}`, {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n})",
              "err": {},
              "uuid": "94613fd4-2287-41ee-bd15-7285f21866f8",
              "parentUUID": "291aab51-21a8-4352-bb16-a8d44b1869c1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"TEST cpPublicApi: Custom Pricing\"",
              "fullTitle": "TEST cpPublicApi: Custom Pricing \"after all\" hook in \"TEST cpPublicApi: Custom Pricing\"",
              "timedOut": false,
              "duration": 576,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let arrayAllRules = [];\nlet retrieveAllRules = await getRulesData();\nconst resultAllRulesId = retrieveAllRules.rules;\nfor (i= 0; i < resultAllRulesId.length; i++){\n    arrayAllRules.push(resultAllRulesId[i].id)\n};\nawait fetch(`https://test-b2b-solution-api-autotest-1.test-bsscommerce.com/cp/rules/delete?domain=${domain}`, {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body:JSON.stringify({deleteRuleId: arrayAllRules}),\n})",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at Context.<anonymous> (tests/publicApiCP/testCPPublicApi.test.js:1856:41)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "fdb05ec2-5e5d-49b3-88d8-3e873c9d3978",
              "parentUUID": "291aab51-21a8-4352-bb16-a8d44b1869c1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "0e2de312-6c4b-4c10-885f-6b4b13abb57a",
              "title": "CP get rule by domain",
              "fullFile": "/home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js",
              "file": "/tests/publicApiCP/testCPPublicApi.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "When the domain and keys are correct: Success status should be true && returns rules",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP get rule by domain When the domain and keys are correct: Success status should be true && returns rules",
                  "timedOut": false,
                  "duration": 501,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetRulesByDomain1;\nchai.request(server)\n    .post(\"/rule/get-by-domain\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('rules');\n        for (let i = 0; i < (res.body.rules).length; i++) {\n            expect(res.body.rules[i]).to.have.all.keys(\n                'id',\n                'shop_id',\n                'name',\n                'priority',\n                'status',\n                'apply_to',\n                'customer_ids',\n                'customer_tags',\n                'product_condition_type',\n                'product_ids',\n                'variant_ids',\n                'product_collections',\n                'product_tags',\n                'published_at',\n                'unpublished_at',\n                'discount_type',\n                'discount_value',\n                'date_rule_type',\n                'start_date',\n                'end_date',\n                'exc_customer_tags',\n                'exc_customers',\n                'exclude_from',\n                'file_theme_index',\n                'market_condition_type',\n                'market_ids',\n                'createdAt',\n                'updatedAt'\n            );\n        };\n        done();\n    });",
                  "err": {},
                  "uuid": "5fc97274-5d44-42ef-9616-f462b2fb4e8e",
                  "parentUUID": "0e2de312-6c4b-4c10-885f-6b4b13abb57a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "When accessKey is wrong: return message accessKey incorrect",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP get rule by domain When accessKey is wrong: return message accessKey incorrect",
                  "timedOut": false,
                  "duration": 152,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetRulesByDomain2;\nchai.request(server)\n    .post(\"/rule/get-by-domain\")\n    .set('content-type', 'application/json')\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"Access key is not correct\");\n        done();\n    });",
                  "err": {},
                  "uuid": "9d53d1c7-9f23-473c-80d3-4f7900936d35",
                  "parentUUID": "0e2de312-6c4b-4c10-885f-6b4b13abb57a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "When accessKey is from wrong shop: return message accessKey incorrect",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP get rule by domain When accessKey is from wrong shop: return message accessKey incorrect",
                  "timedOut": false,
                  "duration": 145,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetRulesByDomain3;\nchai.request(server)\n    .post(\"/rule/get-by-domain\")\n    .set('content-type', 'application/json')\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"Access key is not correct\");\n        done();\n    });",
                  "err": {},
                  "uuid": "855fca20-9c98-424e-ab4e-9aa35bafda38",
                  "parentUUID": "0e2de312-6c4b-4c10-885f-6b4b13abb57a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "When request wrong Domain: return message domain not found",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP get rule by domain When request wrong Domain: return message domain not found",
                  "timedOut": false,
                  "duration": 152,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetRulesByDomain4;\nchai.request(server)\n    .post(\"/rule/get-by-domain\")\n    .set('content-type', 'application/json')\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal('Could not found shop with domain ' + testDomain);\n        done();\n    })",
                  "err": {},
                  "uuid": "3a2fbd2f-51c4-445c-975e-8e69a560e800",
                  "parentUUID": "0e2de312-6c4b-4c10-885f-6b4b13abb57a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "When missing domain: return message domain required",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP get rule by domain When missing domain: return message domain required",
                  "timedOut": false,
                  "duration": 141,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetRulesByDomain5;\nchai.request(server)\n    .post(\"/rule/get-by-domain\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal('Domain is required');\n        done();\n    })",
                  "err": {},
                  "uuid": "b97f2155-933d-4e93-8feb-596cc13f0e47",
                  "parentUUID": "0e2de312-6c4b-4c10-885f-6b4b13abb57a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "When missing accessKey: return message accessKey is required",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP get rule by domain When missing accessKey: return message accessKey is required",
                  "timedOut": false,
                  "duration": 251,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetRulesByDomain6;\nchai.request(server)\n    .post(\"/rule/get-by-domain\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal('accessKey is required. Please add it into the request body');\n        done();\n    })",
                  "err": {},
                  "uuid": "950f6147-e3d7-4046-b78c-f14ff5855981",
                  "parentUUID": "0e2de312-6c4b-4c10-885f-6b4b13abb57a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5fc97274-5d44-42ef-9616-f462b2fb4e8e",
                "9d53d1c7-9f23-473c-80d3-4f7900936d35",
                "855fca20-9c98-424e-ab4e-9aa35bafda38",
                "3a2fbd2f-51c4-445c-975e-8e69a560e800",
                "b97f2155-933d-4e93-8feb-596cc13f0e47",
                "950f6147-e3d7-4046-b78c-f14ff5855981"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1342,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "c2d06b32-d44b-42ab-bddb-6914654b6e2e",
              "title": "CP get rule by ID",
              "fullFile": "/home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js",
              "file": "/tests/publicApiCP/testCPPublicApi.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "When the domain, ID and key are correct: return success true && id information",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP get rule by ID When the domain, ID and key are correct: return success true && id information",
                  "timedOut": false,
                  "duration": 306,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetRulesById1;\nchai.request(server)\n    .post(\"/rule/get-by-id\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('rule');\n        for (let i = 0; i < (res.body.rule).length; i++) {\n            expect(res.body.rule[i]).to.have.all.keys(\n                'id',\n                'name',\n                'priority',\n                'status',\n                'apply_to',\n                'product_condition_type',\n                'customer_ids',\n                'customer_tags',\n                'product_ids',\n                'variant_ids',\n                'product_collections',\n                'product_tags',\n                'discount_type',\n                'discount_value',\n                'exclude_from',\n                'file_theme_index',\n                'market_condition_type',\n                'market_ids',\n                'exc_customers',\n                'createdAt',\n                'updatedAt'\n            );\n        };\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected false to equal true",
                    "estack": "AssertionError: expected false to equal true\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:285:69\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "d44bed04-7572-441e-8f80-119eb6cbcc6a",
                  "parentUUID": "c2d06b32-d44b-42ab-bddb-6914654b6e2e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "When the accessKey was wrong: returns message free access key is not correct",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP get rule by ID When the accessKey was wrong: returns message free access key is not correct",
                  "timedOut": false,
                  "duration": 144,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetRulesById2;\nchai.request(server)\n    .post(\"/rule/get-by-id\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal('Access key is not correct');\n        done();\n    })",
                  "err": {},
                  "uuid": "d1908e4d-d28f-4bdc-a237-1a34581199ed",
                  "parentUUID": "c2d06b32-d44b-42ab-bddb-6914654b6e2e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "When no ID was entered: returns rule id is required",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP get rule by ID When no ID was entered: returns rule id is required",
                  "timedOut": false,
                  "duration": 382,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetRulesById3;\nchai.request(server)\n    .post(\"/rule/get-by-id\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal('Rule id is required');\n        done();\n    })",
                  "err": {},
                  "uuid": "c989b629-b280-49c6-9dde-b401bb10a7fa",
                  "parentUUID": "c2d06b32-d44b-42ab-bddb-6914654b6e2e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "When the ID entered in wrong: returns could not found id message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP get rule by ID When the ID entered in wrong: returns could not found id message",
                  "timedOut": false,
                  "duration": 133,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetRulesById4;\nchai.request(server)\n    .post(\"/rule/get-by-id\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal('Could not found rule with id');\n        done();\n    })",
                  "err": {},
                  "uuid": "17f5b297-0d35-4df2-9803-cf18a42b9567",
                  "parentUUID": "c2d06b32-d44b-42ab-bddb-6914654b6e2e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "When ID entered belongs to another shop: returns message id not found",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP get rule by ID When ID entered belongs to another shop: returns message id not found",
                  "timedOut": false,
                  "duration": 301,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetRulesById5;\nchai.request(server)\n    .post(\"/rule/get-by-id\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('success').to.equal(false)\n        expect(res.body).to.have.property('message').to.equal('Could not found rule with id')\n        done();\n    })",
                  "err": {},
                  "uuid": "c6ad481d-3879-4ad3-9ff2-270a5bf3884e",
                  "parentUUID": "c2d06b32-d44b-42ab-bddb-6914654b6e2e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1908e4d-d28f-4bdc-a237-1a34581199ed",
                "c989b629-b280-49c6-9dde-b401bb10a7fa",
                "17f5b297-0d35-4df2-9803-cf18a42b9567",
                "c6ad481d-3879-4ad3-9ff2-270a5bf3884e"
              ],
              "failures": [
                "d44bed04-7572-441e-8f80-119eb6cbcc6a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1266,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
              "title": "CP Create Single Rule",
              "fullFile": "/home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js",
              "file": "/tests/publicApiCP/testCPPublicApi.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Create a single rule successfully: returns rule is updated message - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule successfully: returns rule is updated message - returns success message",
                  "timedOut": false,
                  "duration": 2377,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule1;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "325e7cb0-26c4-4eda-9bdc-212f3313cf6f",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: rule have no name - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: rule have no name - returns failed message",
                  "timedOut": false,
                  "duration": 153,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule2;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(\"Rule name must be not empty\")\n        done();\n    })",
                  "err": {},
                  "uuid": "cf1b01ba-8cb6-4223-85b2-1457febc1169",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: rule doesn't have name field - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: rule doesn't have name field - returns failed message",
                  "timedOut": false,
                  "duration": 269,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule3;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(\"Rule name must be not empty\")\n        done();\n    })",
                  "err": {},
                  "uuid": "381ca8b5-a936-4377-b04b-735c8c335a5e",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: 2 name fields when create a rule - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: 2 name fields when create a rule - returns failed message",
                  "timedOut": false,
                  "duration": 1806,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule4;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "131b3fbb-b5d1-44f7-8a5c-7ffea2bf129b",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: rule name has special characters - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: rule name has special characters - returns success message",
                  "timedOut": false,
                  "duration": 2140,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule5A;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "01d71afb-a73b-4e7c-bfaf-2be990912868",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: rule name is too long - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: rule name is too long - returns failed message",
                  "timedOut": false,
                  "duration": 133,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule5B;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(\"Name of rule must be within 300 characters\");\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected 'C' to equal 'Name of rule must be within 300 chara…'",
                    "estack": "AssertionError: expected 'C' to equal 'Name of rule must be within 300 chara…'\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:466:55\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- C\n+ Name of rule must be within 300 characters\n"
                  },
                  "uuid": "a2d8d356-078f-4b37-aa5c-f13cda2887a2",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: no priority - return failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: no priority - return failed message",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule6;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`Priority of rule \\\"${mockDataCreateRule6.rule.name}\\\" must be between 0 and 99`)\n        done();\n    })",
                  "err": {},
                  "uuid": "9da8fe35-154d-4c54-8aed-8152915eb5d3",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: missing priority field - return failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: missing priority field - return failed message",
                  "timedOut": false,
                  "duration": 138,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule7;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`priority of rule \\\"${mockDataCreateRule7.rule.name}\\\" is required`)\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected 'Priority of rule \"Auto Test - Missing…' to equal 'priority of rule \"Auto Test - Missing…'",
                    "estack": "AssertionError: expected 'Priority of rule \"Auto Test - Missing…' to equal 'priority of rule \"Auto Test - Missing…'\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:496:55\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- Priority of rule \"Auto Test - Missing Priority Field\" must be a number\n+ priority of rule \"Auto Test - Missing Priority Field\" is required\n"
                  },
                  "uuid": "08bfe7db-d6ff-4923-99f6-29db1b1b06e9",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: 2 priority fields when create a rule - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: 2 priority fields when create a rule - returns failed message",
                  "timedOut": false,
                  "duration": 1863,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule8;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "1a228a14-dd08-4139-b955-7237b6663537",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: priority > 99 - return failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: priority > 99 - return failed message",
                  "timedOut": false,
                  "duration": 148,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule9;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200)\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`Priority of rule \\\"${mockDataCreateRule9.rule.name}\\\" must be between 0 and 99`);\n        done();\n    })",
                  "err": {},
                  "uuid": "fe7a4fc2-412d-4d76-b5d4-7f2c604c9983",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: priority < 0 - return failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: priority < 0 - return failed message",
                  "timedOut": false,
                  "duration": 137,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule10;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false)\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`Priority of rule \\\"${mockDataCreateRule10.rule.name}\\\" must be between 0 and 99`);\n        done();\n    })",
                  "err": {},
                  "uuid": "b93a7fcf-d016-47af-a61f-d7fae7084e55",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: priority is an alphabetic character - return failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: priority is an alphabetic character - return failed message",
                  "timedOut": false,
                  "duration": 129,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule11;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`Priority of rule \\\"${mockDataCreateRule11.rule.name}\\\" must be a number`);\n        done();\n    })",
                  "err": {},
                  "uuid": "8d586611-1bf3-4830-a179-fecc6ca08866",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: status field missing - return failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: status field missing - return failed message",
                  "timedOut": false,
                  "duration": 158,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule12;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`status of rule \\\"${mockDataCreateRule12.rule.name}\\\" is required`);\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected 'Status of rule \"Auto Test - Missing S…' to equal 'status of rule \"Auto Test - Missing S…'",
                    "estack": "AssertionError: expected 'Status of rule \"Auto Test - Missing S…' to equal 'status of rule \"Auto Test - Missing S…'\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:570:55\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- Status of rule \"Auto Test - Missing Status Field\" must be 0 or 1\n+ status of rule \"Auto Test - Missing Status Field\" is required\n"
                  },
                  "uuid": "f8317640-3feb-4f0a-a235-396c0ca83654",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: no status - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: no status - returns failed message",
                  "timedOut": false,
                  "duration": 127,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule13;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`Status of rule \\\"${mockDataCreateRule13.rule.name}\\\" must be 0 or 1`)\n        done();\n    })",
                  "err": {},
                  "uuid": "efd8a49b-1be6-40c2-8e2c-5a0191d16e19",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: status not 0 and 1 - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: status not 0 and 1 - returns failed message",
                  "timedOut": false,
                  "duration": 261,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule14;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`Status of rule \\\"${mockDataCreateRule14.rule.name}\\\" must be 0 or 1`)\n        done();\n    })",
                  "err": {},
                  "uuid": "b0dbb868-909e-4b72-afa8-4453f2fa667b",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed:  apply_to field missing - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed:  apply_to field missing - returns failed message",
                  "timedOut": false,
                  "duration": 263,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule15;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`apply_to of rule \\\"${mockDataCreateRule15.rule.name}\\\" is required`);\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected 'apply_to of rule \"Auto Test - Missing…' to equal 'apply_to of rule \"Auto Test - Missing…'",
                    "estack": "AssertionError: expected 'apply_to of rule \"Auto Test - Missing…' to equal 'apply_to of rule \"Auto Test - Missing…'\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:616:55\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- apply_to of rule \"Auto Test - Missing Apply To Field\" must be 0, 1, 2, 3, or 4\n+ apply_to of rule \"Auto Test - Missing Apply To Field\" is required\n"
                  },
                  "uuid": "ccdc5c13-a624-4665-90ce-51f4907992a7",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: apply_to == null - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: apply_to == null - returns failed message",
                  "timedOut": false,
                  "duration": 158,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule16;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`apply_to of rule \\\"${mockDataCreateRule16.rule.name}\\\" must be 0, 1, 2, 3, or 4`);\n        done();\n    })",
                  "err": {},
                  "uuid": "15363dd5-efa7-4d38-8040-1233d6235ef2",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: apply_to is not a number - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: apply_to is not a number - returns failed message",
                  "timedOut": false,
                  "duration": 149,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule17;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`apply_to of rule \\\"${mockDataCreateRule17.rule.name}\\\" must be 0, 1, 2, 3, or 4`);\n        done();\n    })",
                  "err": {},
                  "uuid": "5f94998a-3fa0-4af9-8065-486732534b9a",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: apply_to is not 1,2,3 or 4 - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: apply_to is not 1,2,3 or 4 - returns failed message",
                  "timedOut": false,
                  "duration": 253,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule18;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`apply_to of rule \\\"${mockDataCreateRule18.rule.name}\\\" must be 0, 1, 2, 3, or 4`);\n        done();\n    })",
                  "err": {},
                  "uuid": "e20372f7-7160-40b3-b57b-aa02ed35f885",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: product_condition_type missing - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: product_condition_type missing - returns failed message",
                  "timedOut": false,
                  "duration": 272,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule19;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200)\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`product_condition_type of rule \\\"${mockDataCreateRule19.rule.name}\\\" is required`)\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected 'product_condition_type of rule \"Auto …' to equal 'product_condition_type of rule \"Auto …'",
                    "estack": "AssertionError: expected 'product_condition_type of rule \"Auto …' to equal 'product_condition_type of rule \"Auto …'\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:676:55\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- product_condition_type of rule \"Auto Test - Wrong Apply To\" must be 0, 1, 2, 3 or 4\n+ product_condition_type of rule \"Auto Test - Wrong Apply To\" is required\n"
                  },
                  "uuid": "fcb19787-aebb-42b3-af8b-c983c47951e7",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: product_condition_type is null - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: product_condition_type is null - returns failed message",
                  "timedOut": false,
                  "duration": 134,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule20;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200)\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`product_condition_type of rule \\\"${mockDataCreateRule20.rule.name}\\\" must be 0, 1, 2, 3 or 4`)\n        done();\n    })",
                  "err": {},
                  "uuid": "6dbc632a-57a7-426f-a95f-3e0adf697b03",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: product_condition_type is not 0,1,2,3 - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: product_condition_type is not 0,1,2,3 - returns failed message",
                  "timedOut": false,
                  "duration": 184,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule21;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200)\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`product_condition_type of rule \\\"${mockDataCreateRule21.rule.name}\\\" must be 0, 1, 2, 3 or 4`)\n        done();\n    })",
                  "err": {},
                  "uuid": "44eadf9e-d9f9-47dc-b1d9-3e70377a054b",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: product_condition_type is not a number - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: product_condition_type is not a number - returns failed message",
                  "timedOut": false,
                  "duration": 127,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule22;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200)\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`product_condition_type of rule \\\"${mockDataCreateRule22.rule.name}\\\" must be 0, 1, 2, 3 or 4`)\n        done();\n    })",
                  "err": {},
                  "uuid": "b2296f94-f862-4400-b3f9-f9491cfb2b6c",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: customer_ids is missing - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: customer_ids is missing - returns success message",
                  "timedOut": false,
                  "duration": 2088,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule23;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "c167ff01-46c6-4d9e-9523-782cbbd2e665",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: customer_ids is null - returns success message ",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: customer_ids is null - returns success message ",
                  "timedOut": false,
                  "duration": 2827,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule24;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "f0bd317f-dbf4-4577-8100-150c50d28c78",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: customer_ids valid - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: customer_ids valid - returns success message",
                  "timedOut": false,
                  "duration": 1826,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule25;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "ead1b89b-585c-4042-b376-7687d90e8911",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "create a single rule success: customer_tags field missing - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule create a single rule success: customer_tags field missing - returns success message",
                  "timedOut": false,
                  "duration": 2064,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule26;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "89ac72a9-d433-4066-8e40-2ce47a595595",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: customer_tags is null - returns success message ",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: customer_tags is null - returns success message ",
                  "timedOut": false,
                  "duration": 1861,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule27;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "5161f5f1-02b4-4c93-9a9e-cc357dda379b",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: customer_tags valid - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: customer_tags valid - returns success message",
                  "timedOut": false,
                  "duration": 2933,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule28;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "045d8e92-0ed1-4646-b4eb-80231642de74",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: product_ids field missing - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: product_ids field missing - returns success message",
                  "timedOut": false,
                  "duration": 2018,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule29;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "ea774a84-dfb2-42e3-ab4b-688daf833575",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: product_ids field = null - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: product_ids field = null - returns success message",
                  "timedOut": false,
                  "duration": 2090,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule30;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "48d13280-dfa7-43a4-9d29-3290216fa8ef",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: product_ids field valid - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: product_ids field valid - returns success message",
                  "timedOut": false,
                  "duration": 1784,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule31;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "f86ea993-44d9-4194-a24e-30257fc11d13",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: variant_ids field is missing - returns sucess message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: variant_ids field is missing - returns sucess message",
                  "timedOut": false,
                  "duration": 1634,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRuleVariant1;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "479f7081-18e7-4b76-ab5d-f412fe590054",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: valid variant_ids - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: valid variant_ids - returns success message",
                  "timedOut": false,
                  "duration": 2132,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRuleVariant2;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "18d030e2-54fd-4d8c-bdf1-9e973260fb31",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule variants_id success: variant_ids is not a number - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule variants_id success: variant_ids is not a number - returns success message",
                  "timedOut": false,
                  "duration": 1859,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRuleVariant3;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n})",
                  "err": {},
                  "uuid": "aea2d02b-2648-4f66-8cc6-5bc79e3d31e4",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule variant_ids success: vairant_ids = null - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule variant_ids success: vairant_ids = null - returns success message",
                  "timedOut": false,
                  "duration": 1678,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRuleVariant4;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "aad23210-1853-41ec-857b-68ced13b09bf",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: variant_ids doesn't exist in system - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: variant_ids doesn't exist in system - returns success message",
                  "timedOut": false,
                  "duration": 2179,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRuleVariant5;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "28654863-5452-457e-ac20-78d5d1e90968",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: product_condition_type is 4, variant_ids missing - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: product_condition_type is 4, variant_ids missing - returns failed message",
                  "timedOut": false,
                  "duration": 128,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRuleVariant6;\nchai.request(server)\n        .post(\"/rule/save\")\n        .set(\"content-type\", \"application/json\")\n        .send(payload)\n        .end((err, res) => {\n            expect(res).to.have.status(200);\n            expect(res.body).to.have.property('success').to.equal(false);\n            expect(res.body).to.have.property('userErrors');\n            expect(res.body.userErrors[0]).to.equal(`variant_ids are required when the rule's product_condition_type is 4`);\n            done();\n})",
                  "err": {},
                  "uuid": "bc04d8dc-4803-4b88-a799-73edfb4131ca",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: product_condition_type is 4, variant_ids valid - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: product_condition_type is 4, variant_ids valid - returns success message",
                  "timedOut": false,
                  "duration": 1935,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRuleVariant7;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "4b4dd4bc-d0e8-4b25-8e17-7207ad9ee19a",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: product_condition_type is 4, variant_ids empty - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: product_condition_type is 4, variant_ids empty - returns success message",
                  "timedOut": false,
                  "duration": 2140,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRuleVariant8;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "7254d39a-9b33-465b-ae22-c8879536303e",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: product_collections field missing - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: product_collections field missing - returns success message",
                  "timedOut": false,
                  "duration": 1975,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule32;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "a80be529-a916-482c-a89c-c77c5663a86c",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: product_collections is null - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: product_collections is null - returns success message",
                  "timedOut": false,
                  "duration": 1921,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule33;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "03c55348-cdef-4141-8a26-ed37e2f6490e",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: product_collection is valid - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: product_collection is valid - returns success message",
                  "timedOut": false,
                  "duration": 2094,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule34;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "46ea8c51-4d4a-446e-bede-924828fdbfe6",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: product_tags field missing - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: product_tags field missing - returns success message",
                  "timedOut": false,
                  "duration": 2699,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule35;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "881af47b-d327-499d-87d9-c51a27f611bc",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: product_tags is null - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: product_tags is null - returns success message",
                  "timedOut": false,
                  "duration": 1879,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule36;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "694a596c-3477-4248-9f8d-a6bd43fd5902",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule success: product_tags is valid - return success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule success: product_tags is valid - return success message",
                  "timedOut": false,
                  "duration": 1649,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule37;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "18173932-dc4f-4429-af4f-4782f5110c9e",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: discount_type field missing - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: discount_type field missing - returns failed message",
                  "timedOut": false,
                  "duration": 273,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule38;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`discount_type of rule \\\"${mockDataCreateRule38.rule.name}\\\" is required`);\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected 'discount_type of rule \"Test rule\" mus…' to equal 'discount_type of rule \"Test rule\" is …'",
                    "estack": "AssertionError: expected 'discount_type of rule \"Test rule\" mus…' to equal 'discount_type of rule \"Test rule\" is …'\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:1083:55\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- discount_type of rule \"Test rule\" must be 0, 1, or 2\n+ discount_type of rule \"Test rule\" is required\n"
                  },
                  "uuid": "5ee9a605-0f58-4c2d-a185-8fca767d5393",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: Two discount_type fields in a rule - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: Two discount_type fields in a rule - returns failed message",
                  "timedOut": false,
                  "duration": 1647,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule39;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Create the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        done();\n    })",
                  "err": {},
                  "uuid": "1280cb8d-7fb6-43b4-bf2f-5b92e87d012e",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: Discount Type is null - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: Discount Type is null - returns failed message",
                  "timedOut": false,
                  "duration": 124,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule40;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`discount_type of rule \\\"${mockDataCreateRule40.rule.name}\\\" must be 0, 1, or 2`);\n        done();\n    })",
                  "err": {},
                  "uuid": "8ff7f69a-2f68-401b-a0d6-de0dc34480f9",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: Discount Type is not a number - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: Discount Type is not a number - returns failed message",
                  "timedOut": false,
                  "duration": 148,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule41;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`discount_type of rule \\\"${mockDataCreateRule41.rule.name}\\\" must be 0, 1, or 2`);\n        done();\n    })",
                  "err": {},
                  "uuid": "7d90ce49-6647-47cb-a9fc-8874147934c7",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: Discount Type is not 0,1, or 2 - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: Discount Type is not 0,1, or 2 - returns failed message",
                  "timedOut": false,
                  "duration": 215,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule42;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`discount_type of rule \\\"${mockDataCreateRule42.rule.name}\\\" must be 0, 1, or 2`);\n        done();\n    })",
                  "err": {},
                  "uuid": "abdd6a0b-d482-4a08-b1cb-e0f1addb8b3f",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: discount_value field missing - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: discount_value field missing - returns failed message",
                  "timedOut": false,
                  "duration": 157,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule43\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`discount_value of rule \\\"${mockDataCreateRule43.rule.name}\\\" is required`);\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected 'C' to equal 'discount_value of rule \"Auto Test - D…'",
                    "estack": "AssertionError: expected 'C' to equal 'discount_value of rule \"Auto Test - D…'\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:1158:55\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- C\n+ discount_value of rule \"Auto Test - Discount Value Missing\" is required\n"
                  },
                  "uuid": "216359a4-7783-4a92-beed-20ff63504676",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: discount_value is null - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: discount_value is null - returns failed message",
                  "timedOut": false,
                  "duration": 201,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule44;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`discount_value of rule \\\"${mockDataCreateRule44.rule.name}\\\" must be a number`);\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected 'C' to equal 'discount_value of rule \"Auto Test - D…'",
                    "estack": "AssertionError: expected 'C' to equal 'discount_value of rule \"Auto Test - D…'\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:1173:55\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- C\n+ discount_value of rule \"Auto Test - Discount Value is null\" must be a number\n"
                  },
                  "uuid": "068fe1d8-e746-4dbd-9a33-c664278e2425",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: discount_value is not a number - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: discount_value is not a number - returns failed message",
                  "timedOut": false,
                  "duration": 280,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule45;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`discount_value of rule \\\"${mockDataCreateRule45.rule.name}\\\" must be a number`);\n        done();\n    })",
                  "err": {},
                  "uuid": "23032e94-c669-4d5d-af43-59709dec201b",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: discount value < 0 - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: discount value < 0 - returns failed message",
                  "timedOut": false,
                  "duration": 160,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule46;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`discount_value of rule \\\"${mockDataCreateRule46.rule.name}\\\" must be greater than 0`);\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected 'C' to equal 'discount_value of rule \"Auto Test - D…'",
                    "estack": "AssertionError: expected 'C' to equal 'discount_value of rule \"Auto Test - D…'\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:1203:55\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- C\n+ discount_value of rule \"Auto Test - Discount fixed value < 0\" must be greater than 0\n"
                  },
                  "uuid": "f5a2eb9c-fab0-4632-bbcc-7007c88d0a06",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: discount_value < 0% - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: discount_value < 0% - returns failed message",
                  "timedOut": false,
                  "duration": 282,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule47\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`discount_value of rule \\\"${mockDataCreateRule47.rule.name}\\\" must be between 0 and 100`);\n        done();\n    })",
                  "err": {},
                  "uuid": "2d73fff4-ab73-4438-bdba-dbfef2ae182f",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a single rule failed: discount_value > 100%: returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create Single Rule Create a single rule failed: discount_value > 100%: returns failed message",
                  "timedOut": false,
                  "duration": 217,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateRule48;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors');\n        expect(res.body.userErrors[0]).to.equal(`discount_value of rule \\\"${mockDataCreateRule48.rule.name}\\\" must be between 0 and 100`);\n        done();\n    })",
                  "err": {},
                  "uuid": "320a673b-b56f-47bf-bced-c84341daa716",
                  "parentUUID": "5dc1b860-7e7a-4a6f-8e08-b06de9a88547",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "325e7cb0-26c4-4eda-9bdc-212f3313cf6f",
                "cf1b01ba-8cb6-4223-85b2-1457febc1169",
                "381ca8b5-a936-4377-b04b-735c8c335a5e",
                "131b3fbb-b5d1-44f7-8a5c-7ffea2bf129b",
                "01d71afb-a73b-4e7c-bfaf-2be990912868",
                "9da8fe35-154d-4c54-8aed-8152915eb5d3",
                "1a228a14-dd08-4139-b955-7237b6663537",
                "fe7a4fc2-412d-4d76-b5d4-7f2c604c9983",
                "b93a7fcf-d016-47af-a61f-d7fae7084e55",
                "8d586611-1bf3-4830-a179-fecc6ca08866",
                "efd8a49b-1be6-40c2-8e2c-5a0191d16e19",
                "b0dbb868-909e-4b72-afa8-4453f2fa667b",
                "15363dd5-efa7-4d38-8040-1233d6235ef2",
                "5f94998a-3fa0-4af9-8065-486732534b9a",
                "e20372f7-7160-40b3-b57b-aa02ed35f885",
                "6dbc632a-57a7-426f-a95f-3e0adf697b03",
                "44eadf9e-d9f9-47dc-b1d9-3e70377a054b",
                "b2296f94-f862-4400-b3f9-f9491cfb2b6c",
                "c167ff01-46c6-4d9e-9523-782cbbd2e665",
                "f0bd317f-dbf4-4577-8100-150c50d28c78",
                "ead1b89b-585c-4042-b376-7687d90e8911",
                "89ac72a9-d433-4066-8e40-2ce47a595595",
                "5161f5f1-02b4-4c93-9a9e-cc357dda379b",
                "045d8e92-0ed1-4646-b4eb-80231642de74",
                "ea774a84-dfb2-42e3-ab4b-688daf833575",
                "48d13280-dfa7-43a4-9d29-3290216fa8ef",
                "f86ea993-44d9-4194-a24e-30257fc11d13",
                "479f7081-18e7-4b76-ab5d-f412fe590054",
                "18d030e2-54fd-4d8c-bdf1-9e973260fb31",
                "aea2d02b-2648-4f66-8cc6-5bc79e3d31e4",
                "aad23210-1853-41ec-857b-68ced13b09bf",
                "28654863-5452-457e-ac20-78d5d1e90968",
                "bc04d8dc-4803-4b88-a799-73edfb4131ca",
                "4b4dd4bc-d0e8-4b25-8e17-7207ad9ee19a",
                "7254d39a-9b33-465b-ae22-c8879536303e",
                "a80be529-a916-482c-a89c-c77c5663a86c",
                "03c55348-cdef-4141-8a26-ed37e2f6490e",
                "46ea8c51-4d4a-446e-bede-924828fdbfe6",
                "881af47b-d327-499d-87d9-c51a27f611bc",
                "694a596c-3477-4248-9f8d-a6bd43fd5902",
                "18173932-dc4f-4429-af4f-4782f5110c9e",
                "1280cb8d-7fb6-43b4-bf2f-5b92e87d012e",
                "8ff7f69a-2f68-401b-a0d6-de0dc34480f9",
                "7d90ce49-6647-47cb-a9fc-8874147934c7",
                "abdd6a0b-d482-4a08-b1cb-e0f1addb8b3f",
                "23032e94-c669-4d5d-af43-59709dec201b",
                "2d73fff4-ab73-4438-bdba-dbfef2ae182f",
                "320a673b-b56f-47bf-bced-c84341daa716"
              ],
              "failures": [
                "a2d8d356-078f-4b37-aa5c-f13cda2887a2",
                "08bfe7db-d6ff-4923-99f6-29db1b1b06e9",
                "f8317640-3feb-4f0a-a235-396c0ca83654",
                "ccdc5c13-a624-4665-90ce-51f4907992a7",
                "fcb19787-aebb-42b3-af8b-c983c47951e7",
                "5ee9a605-0f58-4c2d-a185-8fca767d5393",
                "216359a4-7783-4a92-beed-20ff63504676",
                "068fe1d8-e746-4dbd-9a33-c664278e2425",
                "f5a2eb9c-fab0-4632-bbcc-7007c88d0a06"
              ],
              "pending": [],
              "skipped": [],
              "duration": 60596,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "4a2c1aaa-3bb5-4060-aca9-a6f438086c56",
              "title": "CP Update Single Rule",
              "fullFile": "/home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js",
              "file": "/tests/publicApiCP/testCPPublicApi.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Updating existing rule success: returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Update Single Rule Updating existing rule success: returns success message",
                  "timedOut": false,
                  "duration": 299,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataUpdateRule1;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\",\"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Update the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        expect(res.body).to.have.property('ruleId').to.equal(mockDataUpdateRule1.rule.id);\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected false to equal true",
                    "estack": "AssertionError: expected false to equal true\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:1252:69\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "8b3544a0-46b2-4237-a932-c48b1a6a2f68",
                  "parentUUID": "4a2c1aaa-3bb5-4060-aca9-a6f438086c56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update existing rule failed: wrong domain - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Update Single Rule Update existing rule failed: wrong domain - returns failed message",
                  "timedOut": false,
                  "duration": 132,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataUpdateRule2\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(`Could not found shop with domain ${mockDataUpdateRule2.domain}`);\n        done();\n    })",
                  "err": {},
                  "uuid": "9fdf5109-b4dd-4ddc-a7ea-0345aa6ebe20",
                  "parentUUID": "4a2c1aaa-3bb5-4060-aca9-a6f438086c56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update existing rule failed: wrong accessToken - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Update Single Rule Update existing rule failed: wrong accessToken - returns failed message",
                  "timedOut": false,
                  "duration": 274,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataUpdateRule3;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"Access key is not correct\");\n        done();\n    })",
                  "err": {},
                  "uuid": "e6943648-119d-4e3c-9d21-db684f514174",
                  "parentUUID": "4a2c1aaa-3bb5-4060-aca9-a6f438086c56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update existing rule failed: wrong rule id/id not found - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Update Single Rule Update existing rule failed: wrong rule id/id not found - returns failed message",
                  "timedOut": false,
                  "duration": 259,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataUpdateRule4;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('userErrors').to.equal(`Could not found rule with ID ${mockDataUpdateRule4.rule.id}`);\n        done();\n    })",
                  "err": {},
                  "uuid": "dc753302-d719-40db-ae41-140715bd91b8",
                  "parentUUID": "4a2c1aaa-3bb5-4060-aca9-a6f438086c56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update existing rule success: rule doesn't have variant_ids - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Update Single Rule Update existing rule success: rule doesn't have variant_ids - returns success message",
                  "timedOut": false,
                  "duration": 276,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataUpdateRule5;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\",\"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Update the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        expect(res.body).to.have.property('ruleId').to.equal(mockDataUpdateRule5.rule.id);\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected false to equal true",
                    "estack": "AssertionError: expected false to equal true\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:1310:69\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "72893054-f34f-46d9-a409-0c73b1ce9fd9",
                  "parentUUID": "4a2c1aaa-3bb5-4060-aca9-a6f438086c56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update existing rule success: valid variant_ids - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Update Single Rule Update existing rule success: valid variant_ids - returns success message",
                  "timedOut": false,
                  "duration": 263,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataUpdateRule6;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\",\"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Update the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        expect(res.body).to.have.property('ruleId').to.equal(mockDataUpdateRule6.rule.id);\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected false to equal true",
                    "estack": "AssertionError: expected false to equal true\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:1325:69\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "f0939626-46bd-48cc-8c62-1091acf3cc50",
                  "parentUUID": "4a2c1aaa-3bb5-4060-aca9-a6f438086c56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update existing rule failed: product_condition_type = 4, variant_ids missing - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Update Single Rule Update existing rule failed: product_condition_type = 4, variant_ids missing - returns failed message",
                  "timedOut": false,
                  "duration": 141,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataUpdateRule7;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body.userErrors[0]).to.equal(`variant_ids are required when the rule's product_condition_type is 4`);\n        done();\n    })",
                  "err": {},
                  "uuid": "11eaaf4c-2c10-46d3-bfbc-26f863f9785a",
                  "parentUUID": "4a2c1aaa-3bb5-4060-aca9-a6f438086c56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update existing rule success: product_condition_type = 4, variant_ids valid - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Update Single Rule Update existing rule success: product_condition_type = 4, variant_ids valid - returns success message",
                  "timedOut": false,
                  "duration": 395,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataUpdateRule8;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Update the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        expect(res.body).to.have.property('ruleId').to.equal(mockDataUpdateRule8.rule.id);\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected false to equal true",
                    "estack": "AssertionError: expected false to equal true\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:1354:69\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "d7f69273-6ae4-4b8c-8cad-8bff2da68509",
                  "parentUUID": "4a2c1aaa-3bb5-4060-aca9-a6f438086c56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update existing rule success: product_condition_type = 4, variant_ids empty - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Update Single Rule Update existing rule success: product_condition_type = 4, variant_ids empty - returns success message",
                  "timedOut": false,
                  "duration": 287,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataUpdateRule9;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Update the rule successfully\");\n        expect(res.body).to.have.property('ruleId').which.is.a('number').above(0).and.satisfy(Number.isInteger);\n        expect(res.body).to.have.property('ruleId').to.equal(mockDataUpdateRule9.rule.id);\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected false to equal true",
                    "estack": "AssertionError: expected false to equal true\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:1369:69\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "40dadd4f-f069-4e3a-ba96-16fa81b0fa76",
                  "parentUUID": "4a2c1aaa-3bb5-4060-aca9-a6f438086c56",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9fdf5109-b4dd-4ddc-a7ea-0345aa6ebe20",
                "e6943648-119d-4e3c-9d21-db684f514174",
                "dc753302-d719-40db-ae41-140715bd91b8",
                "11eaaf4c-2c10-46d3-bfbc-26f863f9785a"
              ],
              "failures": [
                "8b3544a0-46b2-4237-a932-c48b1a6a2f68",
                "72893054-f34f-46d9-a409-0c73b1ce9fd9",
                "f0939626-46bd-48cc-8c62-1091acf3cc50",
                "d7f69273-6ae4-4b8c-8cad-8bff2da68509",
                "40dadd4f-f069-4e3a-ba96-16fa81b0fa76"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2326,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "2f52609c-bf10-4807-a397-23755ae72dfa",
              "title": "CP Create/Update Multiple Rules",
              "fullFile": "/home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js",
              "file": "/tests/publicApiCP/testCPPublicApi.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Create multiple rules success: returns success message and rules which was created",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create/Update Multiple Rules Create multiple rules success: returns success message and rules which was created",
                  "timedOut": false,
                  "duration": 757,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload =  mockDataCreateBulkRules1;\nchai.request(server)\n    .post(\"/rule/bulk-save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        let nameArray = mockDataCreateBulkRules1.rules.map(x => x.name)\n        for(i=0;i<mockDataCreateBulkRules1.length;i++){\n            expect(res.body).to.have.property('message').to.include(`Create new rule \\\"${nameArray[i]}\\\" with ID successfully`);\n        }\n        done();\n    })",
                  "err": {},
                  "uuid": "a0468f4f-1a5b-4bd8-991f-416877010d14",
                  "parentUUID": "2f52609c-bf10-4807-a397-23755ae72dfa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create multiple rules success: variant_ids missing - returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create/Update Multiple Rules Create multiple rules success: variant_ids missing - returns success message",
                  "timedOut": false,
                  "duration": 960,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataCreateBulkRules3\nchai.request(server)\n    .post(\"/rule/bulk-save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        let nameArray = payload.rules.map(x => x.name)\n        for(n = 0;n < mockDataCreateBulkRules3.length; n++){\n            expect(res.body).to.have.property('message').to.include(`Create new rule \\\"${nameArray[n]}\\\" with ID successfully`);\n        }\n        done();\n})",
                  "err": {},
                  "uuid": "5a119c85-f948-4c5d-8b93-cbafd38ca5ec",
                  "parentUUID": "2f52609c-bf10-4807-a397-23755ae72dfa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update multiple rules success: returns success message and rules which was created",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create/Update Multiple Rules Update multiple rules success: returns success message and rules which was created",
                  "timedOut": false,
                  "duration": 454,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload =  mockDataCreateBulkRules2;\nchai.request(server)\n    .post(\"/rule/bulk-save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        let nameArray = payload.rules.map(x => x.name)\n        for(i=0;i<payload.length;i++){\n            expect(res.body).to.have.property('message').to.include(`Update rule \\'${nameArray[i]}\\'with ID successfully`);\n        }\n        done();\n    })",
                  "err": {},
                  "uuid": "addce939-5143-4409-8ca7-7518b78744e1",
                  "parentUUID": "2f52609c-bf10-4807-a397-23755ae72dfa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update multiple rules success: variant_ids missing - returns success message ",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Create/Update Multiple Rules Update multiple rules success: variant_ids missing - returns success message ",
                  "timedOut": false,
                  "duration": 632,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload =  mockDataCreateBulkRules4;\nchai.request(server)\n    .post(\"/rule/bulk-save\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        let nameArray = payload.rules.map(x => x.name)\n        for(i=0;i<payload.length;i++){\n            expect(res.body).to.have.property('message').to.include(`Update rule \\'${nameArray[i]}\\'with ID successfully`);\n        }\n        done();\n    })",
                  "err": {},
                  "uuid": "a666db6f-9e00-44fa-9342-16ea4fd988f1",
                  "parentUUID": "2f52609c-bf10-4807-a397-23755ae72dfa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a0468f4f-1a5b-4bd8-991f-416877010d14",
                "5a119c85-f948-4c5d-8b93-cbafd38ca5ec",
                "addce939-5143-4409-8ca7-7518b78744e1",
                "a666db6f-9e00-44fa-9342-16ea4fd988f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2803,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "bf310ad7-19a0-45ee-9b1b-936b4b48f57e",
              "title": "CP Delete Single Rule",
              "fullFile": "/home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js",
              "file": "/tests/publicApiCP/testCPPublicApi.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Delete a single rule success: returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Delete Single Rule Delete a single rule success: returns success message",
                  "timedOut": false,
                  "duration": 472,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataDeleteRule1;\n    chai.request(server)\n        .post(\"/rule/delete\")\n        .set(\"content-type\",\"application/json\")\n        .send(payload)\n        .end((err,res) => {\n            expect(res).to.have.status(200);\n            expect(res.body).to.have.property('success').to.equal(true);\n            expect(res.body).to.have.property('message').to.equal(`Deleted rule successfully`);\n            done();\n        })",
                  "err": {
                    "message": "AssertionError: expected false to equal true",
                    "estack": "AssertionError: expected false to equal true\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:1466:73\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "64f7152d-9245-4c57-9ac6-306a00237f0c",
                  "parentUUID": "bf310ad7-19a0-45ee-9b1b-936b4b48f57e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete a single rule failed: wrong domain - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Delete Single Rule Delete a single rule failed: wrong domain - returns failed message",
                  "timedOut": false,
                  "duration": 279,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataDeleteRule2;\n    chai.request(server)\n        .post(\"/rule/delete\")\n        .set(\"content-type\", \"application/json\")\n        .send(payload)\n        .end((err, res) => {\n            expect(res).to.have.status(200);\n            expect(res.body).to.have.property('success').to.equal(false);\n            expect(res.body).to.have.property('message').to.equal(`Could not found shop with domain ${mockDataDeleteRule2.domain}`);\n            done();\n        })",
                  "err": {},
                  "uuid": "54aea6ec-0825-4359-8347-b3a7a35487ec",
                  "parentUUID": "bf310ad7-19a0-45ee-9b1b-936b4b48f57e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete a single rule failed: domain missing - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Delete Single Rule Delete a single rule failed: domain missing - returns failed message",
                  "timedOut": false,
                  "duration": 220,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataDeleteRule3;\nchai.request(server)\n    .post(\"/rule/delete\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"Domain is required\")\n        done();\n    })",
                  "err": {},
                  "uuid": "432e8d3a-897d-414a-b2a6-2b4d3e4f1c31",
                  "parentUUID": "bf310ad7-19a0-45ee-9b1b-936b4b48f57e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete a single rule failed: accessToken empty - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Delete Single Rule Delete a single rule failed: accessToken empty - returns failed message",
                  "timedOut": false,
                  "duration": 147,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataDeleteRule4;\nchai.request(server)\n    .post(\"/rule/delete\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"accessKey is required. Please add it into the request body\");\n        done();\n    })",
                  "err": {},
                  "uuid": "28583f96-e95d-4442-af4a-4e40c66d61fc",
                  "parentUUID": "bf310ad7-19a0-45ee-9b1b-936b4b48f57e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete a single rule failed: accessKey is missing - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Delete Single Rule Delete a single rule failed: accessKey is missing - returns failed message",
                  "timedOut": false,
                  "duration": 135,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataDeleteRule5;\nchai.request(server)\n    .post(\"/rule/delete\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"accessKey is required. Please add it into the request body\");\n        done();\n    })",
                  "err": {},
                  "uuid": "8d18df68-7a68-4223-b870-78e11fb5e6c6",
                  "parentUUID": "bf310ad7-19a0-45ee-9b1b-936b4b48f57e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete a single rule failed: accessKey is wrong - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Delete Single Rule Delete a single rule failed: accessKey is wrong - returns failed message",
                  "timedOut": false,
                  "duration": 263,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataDeleteRule6;\nchai.request(server)\n    .post(\"/rule/delete\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"Access key is not correct\");\n        done();\n    })",
                  "err": {},
                  "uuid": "555e3a8c-8647-42ed-b3ca-78a7ae63ec87",
                  "parentUUID": "bf310ad7-19a0-45ee-9b1b-936b4b48f57e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete a single rule failed: missing id field - returns failed message ",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Delete Single Rule Delete a single rule failed: missing id field - returns failed message ",
                  "timedOut": false,
                  "duration": 260,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataDeleteRule7;\nchai.request(server)\n    .post(\"/rule/delete\")\n    .set(\"content-type\",\"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"Rule ID is required\");\n        done();\n    })",
                  "err": {},
                  "uuid": "01ed2dde-1673-4078-ab1e-b613713328f4",
                  "parentUUID": "bf310ad7-19a0-45ee-9b1b-936b4b48f57e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete a single rule failed: wrong id - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Delete Single Rule Delete a single rule failed: wrong id - returns failed message",
                  "timedOut": false,
                  "duration": 384,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataDeleteRule8;\nchai.request(server)\n    .post(\"/rule/delete\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(`Could not delete rule with ID ${mockDataDeleteRule8.id}`);\n        done();\n    })",
                  "err": {},
                  "uuid": "2a091c7d-6f58-4245-b695-da5e13994fc2",
                  "parentUUID": "bf310ad7-19a0-45ee-9b1b-936b4b48f57e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54aea6ec-0825-4359-8347-b3a7a35487ec",
                "432e8d3a-897d-414a-b2a6-2b4d3e4f1c31",
                "28583f96-e95d-4442-af4a-4e40c66d61fc",
                "8d18df68-7a68-4223-b870-78e11fb5e6c6",
                "555e3a8c-8647-42ed-b3ca-78a7ae63ec87",
                "01ed2dde-1673-4078-ab1e-b613713328f4",
                "2a091c7d-6f58-4245-b695-da5e13994fc2"
              ],
              "failures": [
                "64f7152d-9245-4c57-9ac6-306a00237f0c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2160,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "8b19c2ba-2d4f-4395-81bd-b8bdc071ad12",
              "title": "CP Delete Multiple Rules",
              "fullFile": "/home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js",
              "file": "/tests/publicApiCP/testCPPublicApi.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Delete multiple rule success: returns success message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Delete Multiple Rules Delete multiple rule success: returns success message",
                  "timedOut": false,
                  "duration": 406,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataBulkDelete1;\nchai.request(server)\n    .post(\"/rule/mass-delete\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('message').to.equal(\"Deleted multiple rule successfully\");\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected 'Deleted rule successfully' to equal 'Deleted multiple rule successfully'",
                    "estack": "AssertionError: expected 'Deleted rule successfully' to equal 'Deleted multiple rule successfully'\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:1587:69\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- Deleted rule successfully\n+ Deleted multiple rule successfully\n"
                  },
                  "uuid": "0075e283-a3af-4924-b923-7e56c88c5e60",
                  "parentUUID": "8b19c2ba-2d4f-4395-81bd-b8bdc071ad12",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "0075e283-a3af-4924-b923-7e56c88c5e60"
              ],
              "pending": [],
              "skipped": [],
              "duration": 406,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "0c667807-5ec1-47dd-8f67-a37754c9a822",
              "title": "CP Get Applied Rules for Products",
              "fullFile": "/home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js",
              "file": "/tests/publicApiCP/testCPPublicApi.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get Applied Rules for Products success: returns applied rules",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Get Applied Rules for Products Get Applied Rules for Products success: returns applied rules",
                  "timedOut": false,
                  "duration": 1396,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetAppliedRules1;\nchai.request(server)\n    .post(\"/rule/get-products-applied-rules\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('productsAppliedRule')\n        for(i = 0; i < (res.body.productsAppliedRule).length; i++){\n            expect(res.body.productsAppliedRule[i]).to.have.all.keys(\n                'id',\n                'discount_type',\n                'value',\n                'name'\n            );\n        };\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected false to equal true",
                    "estack": "AssertionError: expected false to equal true\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:1606:69\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "fa91785a-7285-48df-a578-5384e44dbc21",
                  "parentUUID": "0c667807-5ec1-47dd-8f67-a37754c9a822",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get Applied Rules for Products failed: domain missing - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Get Applied Rules for Products Get Applied Rules for Products failed: domain missing - returns failed message",
                  "timedOut": false,
                  "duration": 670,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetAppliedRules2;\nchai.request(server)\n    .post(\"/rule/get-products-applied-rules\")\n    .set(\"product-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal('Domain is required');\n        done();\n    })",
                  "err": {},
                  "uuid": "64dae791-9ebe-4998-9143-aca80db73ffd",
                  "parentUUID": "0c667807-5ec1-47dd-8f67-a37754c9a822",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get Applied Rules for Products failed: wrong domain - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Get Applied Rules for Products Get Applied Rules for Products failed: wrong domain - returns failed message",
                  "timedOut": false,
                  "duration": 198,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetAppliedRules3;\nchai.request(server)\n    .post(\"/rule/get-products-applied-rules\")\n    .set(\"product-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(`Could not found shop with domain ${mockDataGetAppliedRules3.domain}`);\n        done();\n    })",
                  "err": {},
                  "uuid": "a138dfad-87a7-4131-b3d0-feacae37a187",
                  "parentUUID": "0c667807-5ec1-47dd-8f67-a37754c9a822",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get Applied Rule for Products failed: accessKey was missing - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Get Applied Rules for Products Get Applied Rule for Products failed: accessKey was missing - returns failed message",
                  "timedOut": false,
                  "duration": 438,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetAppliedRules4;\nchai.request(server)\n    .post(\"/rule/get-products-applied-rules\")\n    .set(\"product-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"accessKey is required. Please add it into the request body\");\n        done();\n    })",
                  "err": {},
                  "uuid": "879d3889-a608-417a-8429-678d656ed956",
                  "parentUUID": "0c667807-5ec1-47dd-8f67-a37754c9a822",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get Applied Rules for Products failed: accessKey is wrong -  returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Get Applied Rules for Products Get Applied Rules for Products failed: accessKey is wrong -  returns failed message",
                  "timedOut": false,
                  "duration": 126,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetAppliedRules5;\nchai.request(server)\n    .post(\"/rule/get-products-applied-rules\")\n    .set(\"product-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"Access key is not correct\");\n        done();\n    })",
                  "err": {},
                  "uuid": "8b983bc2-44b6-4200-82a0-96f1271c1997",
                  "parentUUID": "0c667807-5ec1-47dd-8f67-a37754c9a822",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get Applied Rules for Products failed: product_ids is missing - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Get Applied Rules for Products Get Applied Rules for Products failed: product_ids is missing - returns failed message",
                  "timedOut": false,
                  "duration": 719,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetAppliedRules6;\nchai.request(server)\n    .post(\"/rule/get-products-applied-rules\")\n    .set(\"product-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"product_ids is required\");\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected 'Could not get Applied Rule' to equal 'product_ids is required'",
                    "estack": "AssertionError: expected 'Could not get Applied Rule' to equal 'product_ids is required'\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:1685:69\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- Could not get Applied Rule\n+ product_ids is required\n"
                  },
                  "uuid": "cecc3259-ba96-4461-91dd-9521939a59c4",
                  "parentUUID": "0c667807-5ec1-47dd-8f67-a37754c9a822",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get Applied Rules for Products failed: product_ids is wrong - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Get Applied Rules for Products Get Applied Rules for Products failed: product_ids is wrong - returns failed message",
                  "timedOut": false,
                  "duration": 792,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetAppliedRules7;\nchai.request(server)\n    .post(\"/rule/get-products-applied-rules\")\n    .set(\"product-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"Could not get Applied Rule\")\n        done();\n    })",
                  "err": {},
                  "uuid": "33e24971-83b1-4a08-b870-2ab97104a619",
                  "parentUUID": "0c667807-5ec1-47dd-8f67-a37754c9a822",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get Applied Rules for Products failed: customer_id is missing - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Get Applied Rules for Products Get Applied Rules for Products failed: customer_id is missing - returns failed message",
                  "timedOut": false,
                  "duration": 292,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload  = mockDataGetAppliedRules8;\nchai.request(server)\n    .post(\"/rule/get-products-applied-rules\")\n    .set(\"product-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"customer_id is required\");\n        done();\n    })",
                  "err": {},
                  "uuid": "59eb4074-c81c-4c77-b9b9-345b40071b49",
                  "parentUUID": "0c667807-5ec1-47dd-8f67-a37754c9a822",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "64dae791-9ebe-4998-9143-aca80db73ffd",
                "a138dfad-87a7-4131-b3d0-feacae37a187",
                "879d3889-a608-417a-8429-678d656ed956",
                "8b983bc2-44b6-4200-82a0-96f1271c1997",
                "33e24971-83b1-4a08-b870-2ab97104a619",
                "59eb4074-c81c-4c77-b9b9-345b40071b49"
              ],
              "failures": [
                "fa91785a-7285-48df-a578-5384e44dbc21",
                "cecc3259-ba96-4461-91dd-9521939a59c4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4631,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "1a23e55c-ac46-4a5c-8c00-2681aaba5de4",
              "title": "CP Get Price List of Variants based on Applied Rules",
              "fullFile": "/home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js",
              "file": "/tests/publicApiCP/testCPPublicApi.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get Price List of Variants based on Applied Rules success:  returns list variants and rules",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Get Price List of Variants based on Applied Rules Get Price List of Variants based on Applied Rules success:  returns list variants and rules",
                  "timedOut": false,
                  "duration": 900,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetAppliedRules1;\nchai.request(server)\n    .post(\"/rule/get-variants-price-list\")\n    .set(\"content-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(true);\n        expect(res.body).to.have.property('priceList');\n        for(i = 0; i < (res.body.priceList).length; i++) {\n            expect(res.body.priceList[i]).to.have.all.keys(\n                'id',\n                'discount_type',\n                'value',\n                'name',\n                'variants'\n            );\n            expect(res.body.priceList[i].variants[0]).to.have.all.keys(\n                'id',\n                'price',\n                'compareAtPrice',\n                'appliedRulePrice'\n            );\n        };\n            done();\n    });",
                  "err": {
                    "message": "AssertionError: expected false to equal true",
                    "estack": "AssertionError: expected false to equal true\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:1733:69\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "188f8ebc-896b-49cf-bc8f-f62bdd3e6c94",
                  "parentUUID": "1a23e55c-ac46-4a5c-8c00-2681aaba5de4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get Price List of Variants based on Applied Rules failed: domain missing - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Get Price List of Variants based on Applied Rules Get Price List of Variants based on Applied Rules failed: domain missing - returns failed message",
                  "timedOut": false,
                  "duration": 121,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetAppliedRules2;\nchai.request(server)\n    .post(\"/rule/get-variants-price-list\")\n    .set(\"product-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal('Domain is required');\n        done();\n    })",
                  "err": {},
                  "uuid": "4f1c15ff-5c75-4a57-ad82-3fd419825985",
                  "parentUUID": "1a23e55c-ac46-4a5c-8c00-2681aaba5de4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get Price List of Variants based on Applied Rules failed: wrong domain - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Get Price List of Variants based on Applied Rules Get Price List of Variants based on Applied Rules failed: wrong domain - returns failed message",
                  "timedOut": false,
                  "duration": 117,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetAppliedRules3;\nchai.request(server)\n    .post(\"/rule/get-variants-price-list\")\n    .set(\"product-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(`Could not found shop with domain ${mockDataGetAppliedRules3.domain}`);\n        done();\n    });",
                  "err": {},
                  "uuid": "b93c63c7-3c66-4742-bec6-04902f19bb23",
                  "parentUUID": "1a23e55c-ac46-4a5c-8c00-2681aaba5de4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get Price List of Variants based on Applied Rules failed: accessKey was missing - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Get Price List of Variants based on Applied Rules Get Price List of Variants based on Applied Rules failed: accessKey was missing - returns failed message",
                  "timedOut": false,
                  "duration": 177,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetAppliedRules4;\nchai.request(server)\n    .post(\"/rule/get-variants-price-list\")\n    .set(\"product-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"accessKey is required. Please add it into the request body\");\n        done();\n    })",
                  "err": {},
                  "uuid": "b223d011-2aea-4bb3-aa62-34f33fb1a377",
                  "parentUUID": "1a23e55c-ac46-4a5c-8c00-2681aaba5de4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get Price List of Variants based on Applied Rules failed: accessKey is wrong -  returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Get Price List of Variants based on Applied Rules Get Price List of Variants based on Applied Rules failed: accessKey is wrong -  returns failed message",
                  "timedOut": false,
                  "duration": 145,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetAppliedRules5;\nchai.request(server)\n    .post(\"/rule/get-variants-price-list\")\n    .set(\"product-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"Access key is not correct\");\n        done();\n    })",
                  "err": {},
                  "uuid": "98600d4b-829c-4c9b-b1e2-2f0a80c2b638",
                  "parentUUID": "1a23e55c-ac46-4a5c-8c00-2681aaba5de4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get Price List of Variants based on Applied Rules failed: product_ids is missing - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Get Price List of Variants based on Applied Rules Get Price List of Variants based on Applied Rules failed: product_ids is missing - returns failed message",
                  "timedOut": false,
                  "duration": 1883,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetAppliedRules6;\nchai.request(server)\n    .post(\"/rule/get-variants-price-list\")\n    .set(\"product-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"product_ids is required\");\n        done();\n    })",
                  "err": {
                    "message": "AssertionError: expected 'Could not get Applied Rule' to equal 'product_ids is required'",
                    "estack": "AssertionError: expected 'Could not get Applied Rule' to equal 'product_ids is required'\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApi.test.js:1819:69\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /home/trungdongfym/BSS/b2b_solution/code_public_api/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:54:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                    "diff": "- Could not get Applied Rule\n+ product_ids is required\n"
                  },
                  "uuid": "31f1afb1-f1c3-4abe-82ee-bf85efc79761",
                  "parentUUID": "1a23e55c-ac46-4a5c-8c00-2681aaba5de4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get Price List of Variants based on Applied Rules failed: product_ids is wrong - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Get Price List of Variants based on Applied Rules Get Price List of Variants based on Applied Rules failed: product_ids is wrong - returns failed message",
                  "timedOut": false,
                  "duration": 648,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload = mockDataGetAppliedRules7;\nchai.request(server)\n    .post(\"/rule/get-variants-price-list\")\n    .set(\"product-type\", \"application/json\")\n    .send(payload)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"Could not get Applied Rule\")\n        done();\n    })",
                  "err": {},
                  "uuid": "b4369dbc-d23e-4e85-888a-3174df1e20cb",
                  "parentUUID": "1a23e55c-ac46-4a5c-8c00-2681aaba5de4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get Price List of Variants based on Applied Rules failed: customer_id is missing - returns failed message",
                  "fullTitle": "TEST cpPublicApi: Custom Pricing CP Get Price List of Variants based on Applied Rules Get Price List of Variants based on Applied Rules failed: customer_id is missing - returns failed message",
                  "timedOut": false,
                  "duration": 354,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let payload  = mockDataGetAppliedRules8;\nchai.request(server)\n    .post(\"/rule/get-variants-price-list\")\n    .set(\"product-type\", \"application/json\")\n    .send(payload)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"customer_id is required\");\n        done();\n    })",
                  "err": {},
                  "uuid": "f61825c9-9ff9-4040-9210-cc616003475c",
                  "parentUUID": "1a23e55c-ac46-4a5c-8c00-2681aaba5de4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f1c15ff-5c75-4a57-ad82-3fd419825985",
                "b93c63c7-3c66-4742-bec6-04902f19bb23",
                "b223d011-2aea-4bb3-aa62-34f33fb1a377",
                "98600d4b-829c-4c9b-b1e2-2f0a80c2b638",
                "b4369dbc-d23e-4e85-888a-3174df1e20cb",
                "f61825c9-9ff9-4040-9210-cc616003475c"
              ],
              "failures": [
                "188f8ebc-896b-49cf-bc8f-f62bdd3e6c94",
                "31f1afb1-f1c3-4abe-82ee-bf85efc79761"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4345,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "477c5f3a-6975-46c0-a238-9e25cfdc24a8",
          "title": "Disable Public API",
          "fullFile": "/home/trungdongfym/BSS/b2b_solution/code_public_api/tests/publicApiCP/testCPPublicApiEnable.test.js",
          "file": "/tests/publicApiCP/testCPPublicApiEnable.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Disable Public API\"",
              "fullTitle": "Disable Public API \"before all\" hook in \"Disable Public API\"",
              "timedOut": false,
              "duration": 921,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = disableModule;\nawait fetch(`${moduleAPIURL}/module?domain=${process.env.DOMAIN_AUTO_TEST}`, {\n    method: 'PUT',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n})\nawait fetch(`https://b2b-solution-api.bsscommerce.com/upload/update-config?domain=${domain}`, {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n})",
              "err": {},
              "uuid": "f4ba0740-5993-45ed-bd3a-e68e6eb10669",
              "parentUUID": "477c5f3a-6975-46c0-a238-9e25cfdc24a8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "When module disabled: Get rules by domain returns failed message",
              "fullTitle": "Disable Public API When module disabled: Get rules by domain returns failed message",
              "timedOut": false,
              "duration": 208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = mockDataGetRulesByDomain1\nchai.request(server)\n    .post(\"/rule/get-by-domain\")\n    .set('content-type', 'application/json')\n    .send(data)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal(\"Public API was disabled from B2B/Wholesale Sulution App dashboard, enable to use.\");\n        done();\n    })",
              "err": {},
              "uuid": "209ca3d0-723d-4c5b-8856-918b1cea6fc8",
              "parentUUID": "477c5f3a-6975-46c0-a238-9e25cfdc24a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When module disabled: Get rules by ID returns failed message",
              "fullTitle": "Disable Public API When module disabled: Get rules by ID returns failed message",
              "timedOut": false,
              "duration": 156,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = mockDataGetRulesById1;\nchai.request(server)\n    .post(\"/rule/get-by-id\")\n    .set(\"content-type\",\"application/json\")\n    .send(data)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal('Public API was disabled from B2B/Wholesale Sulution App dashboard, enable to use.');\n        done();\n    })",
              "err": {},
              "uuid": "659d8d75-97a1-4857-86a6-a5a33a7962c7",
              "parentUUID": "477c5f3a-6975-46c0-a238-9e25cfdc24a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When module disabled: Create single rule returns failed message",
              "fullTitle": "Disable Public API When module disabled: Create single rule returns failed message",
              "timedOut": false,
              "duration": 136,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = mockDataCreateRule1;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\",\"application/json\")\n    .send(data)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal('Public API was disabled from B2B/Wholesale Sulution App dashboard, enable to use.');\n        done();\n    })",
              "err": {},
              "uuid": "58d1acb4-10a6-4fed-9d77-237d8be6f258",
              "parentUUID": "477c5f3a-6975-46c0-a238-9e25cfdc24a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When module disabled: Update single rule returns failed message",
              "fullTitle": "Disable Public API When module disabled: Update single rule returns failed message",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = mockDataUpdateRule1;\nchai.request(server)\n    .post(\"/rule/save\")\n    .set(\"content-type\",\"application/json\")\n    .send(data)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal('Public API was disabled from B2B/Wholesale Sulution App dashboard, enable to use.');\n        done();\n    });",
              "err": {},
              "uuid": "3b79009d-8e44-43e7-b66b-e1b6acfd9f70",
              "parentUUID": "477c5f3a-6975-46c0-a238-9e25cfdc24a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When module disabled: Delete single rule returns failed message",
              "fullTitle": "Disable Public API When module disabled: Delete single rule returns failed message",
              "timedOut": false,
              "duration": 313,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = mockDataDeleteRule1;\nchai.request(server)\n    .post(\"/rule/delete\")\n    .set(\"content-type\",\"application/json\")\n    .send(data)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal('Public API was disabled from B2B/Wholesale Sulution App dashboard, enable to use.');\n        done();\n    });",
              "err": {},
              "uuid": "d4d123e8-af00-4d59-b2e1-936bb2afde0e",
              "parentUUID": "477c5f3a-6975-46c0-a238-9e25cfdc24a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When module disabled: Get applied rule failed",
              "fullTitle": "Disable Public API When module disabled: Get applied rule failed",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = mockDataGetAppliedRules1;\nchai.request(server)\n    .post(\"/rule/get-products-applied-rules\")\n    .set(\"content-type\",\"application/json\")\n    .send(data)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal('Public API was disabled from B2B/Wholesale Sulution App dashboard, enable to use.');\n        done();\n    })",
              "err": {},
              "uuid": "f106afb7-94bb-44f2-bbda-6f8482627210",
              "parentUUID": "477c5f3a-6975-46c0-a238-9e25cfdc24a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When module disabled: Get Price List of Variants based on Applied Rules failed",
              "fullTitle": "Disable Public API When module disabled: Get Price List of Variants based on Applied Rules failed",
              "timedOut": false,
              "duration": 141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = mockDataGetAppliedRules1;\nchai.request(server)\n    .post(\"/rule/get-variants-price-list\")\n    .set(\"content-type\",\"application/json\")\n    .send(data)\n    .end((err,res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('success').to.equal(false);\n        expect(res.body).to.have.property('message').to.equal('Public API was disabled from B2B/Wholesale Sulution App dashboard, enable to use.');\n        done();\n    })",
              "err": {},
              "uuid": "5f737c95-9ddd-4a50-98d5-a548caccba9d",
              "parentUUID": "477c5f3a-6975-46c0-a238-9e25cfdc24a8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "209ca3d0-723d-4c5b-8856-918b1cea6fc8",
            "659d8d75-97a1-4857-86a6-a5a33a7962c7",
            "58d1acb4-10a6-4fed-9d77-237d8be6f258",
            "3b79009d-8e44-43e7-b66b-e1b6acfd9f70",
            "d4d123e8-af00-4d59-b2e1-936bb2afde0e",
            "f106afb7-94bb-44f2-bbda-6f8482627210",
            "5f737c95-9ddd-4a50-98d5-a548caccba9d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1192,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 100000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "[datetime]-cp-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "[datetime]-cp-report",
        "overwrite": "false",
        "timestamp": "yyyymmddHHMMss"
      },
      "version": "6.2.0"
    }
  }
}